---
## VAR SETUP
- name: 'Set CentOS directory prefix'
  set_fact: etc_prefix=/etc
  when: ansible_os_family == "RedHat"

- name: 'Set CentOS haproxy config location'
  set_fact: config_location=/etc/haproxy/haproxy.cfg
  when: ansible_os_family == "RedHat"

- name: 'Set SmartOS etc prefix'
  set_fact: etc_prefix=/opt/local/etc
  when: ansible_os_family == "Solaris"

- name: 'Set SmartOS haproxy config location'
  set_fact: config_location=/opt/local/etc/haproxy.cfg
  when: ansible_os_family == "Solaris"

- name: 'Set Debian/Ubuntu directory prefix'
  set_fact: etc_prefix=/etc
  when: ansible_os_family == "Debian"

- name: 'Set Debian/Ubuntu haproxy config location'
  set_fact: config_location=/etc/haproxy/haproxy.cfg
  when: ansible_os_family == "Debian"

## PACKAGE INSTALL

- name: 'Check epel repo'
  command: yum repolist | grep -qi EPEL
  register: epel_repo_check
  when: ansible_pkg_mgr == 'yum'

- name: 'Add epel repo'
  template: src=epel.repo
        dest=/etc/yum.repos.d/epel.repo
        owner=root group=root mode=0644
  when: ansible_pkg_mgr == 'yum' and epel_repo_check.rc != 0

- name: 'Installs haproxy as well as socat for socket api'
  yum: name={{ item }} state=latest
  with_items:
    - haproxy
    - socat
  when: ansible_os_family == 'RedHat'

- name: 'Add haproxy apt repo'
  sudo: yes
  apt_repository: repo="deb http://http.debian.net/debian wheezy-backports main" state=present update_cache=yes
  when: ansible_lsb.codename == "wheezy"

- name: 'Add haproxy apt repo'
  sudo: yes
  apt_repository: repo="ppa:vbernat/haproxy-1.5" state=present update_cache=yes
  when: ansible_lsb.id == "Ubuntu"

- name: 'Installs haproxy as well as socat for socket api'
  apt: pkg={{ item }} state=latest
  with_items:
    - haproxy
    - socat
  when: ansible_os_family == 'Debian'

- name: 'Installs haproxy as well as socat for socket api'
  pkgin: name={{ item }} state=present
  with_items:
    - haproxy
    - socat
  when: ansible_os_family == 'Solaris'

- name: 'Enable it'
  service: name=haproxy enabled=yes

- name: 'Ensure chroot directory exists'
  file: name={{ haproxy_global.chroot }} state=directory
  when: haproxy_global.chroot is defined and haproxy_global.chroot

## ASSEMBLE CONFIGS

- name: 'Create the config folder for fragments'
  file: name={{ etc_prefix }}/haproxy/conf.d state=directory

- name: 'Build up the global config'
  template: src=global.cfg dest={{ etc_prefix }}/haproxy/conf.d/01-global.cfg
  when: haproxy_global is defined
  tags: 'test'

- name: 'Build up the default config'
  template: src=defaults.cfg dest={{ etc_prefix }}/haproxy/conf.d/02-defaults.cfg
  when: haproxy_defaults is defined

- name: 'Build up the frontends'
  template: src=frontend.cfg dest={{ etc_prefix }}/haproxy/conf.d/03-frontends.cfg
  when: haproxy_frontends is defined

- name: 'Build up the backends'
  template: src=backend.cfg dest={{ etc_prefix }}/haproxy/conf.d/04-backends.cfg
  when: haproxy_backends is defined

- name: 'Build up the listen sections'
  template: src=listen.cfg dest={{ etc_prefix }}/haproxy/conf.d/05-listen.cfg
  when: haproxy_listen is defined

- name: 'Build up the userlist sections'
  template: src=userlist.cfg dest={{ etc_prefix }}/haproxy/conf.d/06-userlists.cfg
  when: haproxy_userlists is defined

- name: 'Assemble the final configuration file'
  assemble: src={{ etc_prefix }}/haproxy/conf.d dest={{ config_location }} backup=yes
  notify: restart haproxy
  tags: 'test'
